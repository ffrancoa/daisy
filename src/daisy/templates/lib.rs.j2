// {{ title }}
//
{% for line in description.splitlines() -%}
{{ '// ' + line if line else '//' }}
{% endfor %}
{% if constraints %}
//
{{ '// ' + constraints_header }}
{{ '// ' + '-' * constraints_header|length }}
{% for line in constraints.splitlines() -%}
{{ '// ' + line if line else '//' }}
{% endfor %}
{% endif -%}

{% if input_spec %}
//
{{ '// ' + input_header }}
{{ '// ' + '-' * input_header|length }}
{% for line in input_spec.splitlines() -%}
{{ '// ' + line if line else '//' }}
{% endfor %}
{% endif -%}

{% if output_spec %}
//
{{ '// ' + output_header }}
{{ '// ' + '-' * output_header|length }}
{% for line in output_spec.splitlines() -%}
{{ '// ' + line if line else '//' }}
{% endfor %}
{% endif %}

{% if rust_signature %}
{{ rust_signature }}
{% else %}
pub fn {{ function_name }}(input: &str) -> String {
{% endif %}
    todo!("pending solution!")
}

#[cfg(test)]
mod tests {
    use super::*;
    {% if use_indoc %}
    use indoc::indoc;
    {% endif %}

{% for s in samples %}
    #[test]
    fn {{ s.name }}() {
        {% if use_indoc %}
        let input = indoc! {"
{{ s.input | indent(12, true) }}
        "};
        let expected = indoc! {"
{{ s.output | indent(12, true) }}
        "};
        assert_eq!({{ function_name }}(input), expected);
        {% else %}
{{ s.input | indent(8, true) }}
        let expected = {{ s.output }};
        {% if s.explanation %}
        {% for line in s.explanation.splitlines() %}
        // {{ line }}
        {% endfor %}
        {% endif %}
        assert_eq!({{ function_name }}(nums, target), expected);
        {% endif %}
    }
{% endfor %}
}
